# 1. Librerías y datos ----
library(readxl)
library(forecast)
install.packages("forecast")
library(ggplot2)
library(dplyr)
install.packages("dplyr")
# 1. Librerías y datos ----
library(readxl)
library(forecast)
library(ggplot2)
library(dplyr)
setwd("~/8vo semestre/Tesis")
df <- read_excel("DatosAgroNet_limpio.xlsx")
# Supón que la columna de precios es COP_kg
df_total <- df
train_size <- floor(0.8 * nrow(df_total))
test_size <- nrow(df_total) - train_size
df_train <- df_total[1:train_size, ]
df_test <- df_total[(train_size+1):nrow(df_total), ]
# 2. Hiperparámetros SARIMA (búsqueda/grid search) ----
mejor_rmse <- Inf
mejor_modelo <- NULL
mejores_param <- NULL
for (s in c(4, 12, 26, 52)) {
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
for (P in 0:1) {
for (D in 0:1) {
for (Q in 0:1) {
tryCatch({
fit <- Arima(df_train$COP_kg,
order = c(p,d,q),
seasonal = list(order = c(P,D,Q), period = s))
fc <- forecast(fit, h = test_size)
pred <- fc$mean
rmse <- sqrt(mean((df_test$COP_kg - pred)^2))
if (rmse < mejor_rmse) {
mejor_rmse <- rmse
mejores_param <- list(order = c(p,d,q), seasonal = c(P,D,Q,s))
mejor_modelo <- fit
}
}, error=function(e){})
}
}
}
}
}
}
}
if (!is.null(mejores_param)) {
print(mejores_param)  # Orden óptimo
print(mejor_rmse)
}
# 3. Ajustar y resumir modelo ----
summary(mejor_modelo)
# 4. Predicción y métricas ----
fc_final <- forecast(mejor_modelo, h = test_size)
for (s in c(4, 12, 26, 52)) {
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
for (P in 0:1) {
for (D in 0:1) {
for (Q in 0:1) {
tryCatch({
fit <- Arima(df_train$COP_kg,
order = c(p,d,q),
seasonal = list(order = c(P,D,Q), period = s))
fc <- forecast(fit, h = test_size)
pred <- fc$mean
rmse <- sqrt(mean((df_test$COP_kg - pred)^2))
if (rmse < mejor_rmse) {
mejor_rmse <- rmse
mejores_param <- list(order = c(p,d,q), seasonal = c(P,D,Q,s))
mejor_modelo <- fit
}
}, error=function(e){})
}
}
}
}
}
}
}
fit <- Arima(df_train$COP_kg,
order = c(p,d,q),
seasonal = list(order = c(P,D,Q), period = s))
print(mejor_rmse)
if (!is.null(mejores_param)) {
print(mejores_param)  # Orden óptimo
print(mejor_rmse)
}
# 3. Ajustar y resumir modelo ----
summary(mejor_modelo)
# 4. Predicción y métricas ----
fc_final <- forecast(mejor_modelo, h = test_size)
pred <- fc_final$mean
mejor_modelo <- NULL
# 2. Hiperparámetros SARIMA (búsqueda/grid search) ----
mejor_rmse <- -Inf
mejores_param <- NULL
for (s in c(4, 12, 26, 52)) {
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
for (P in 0:1) {
for (D in 0:1) {
for (Q in 0:1) {
tryCatch({
fit <- Arima(df_train$COP_kg,
order = c(p,d,q),
seasonal = list(order = c(P,D,Q), period = s))
fc <- forecast(fit, h = test_size)
pred <- fc$mean
rmse <- sqrt(mean((df_test$COP_kg - pred)^2))
if (rmse < mejor_rmse) {
mejor_rmse <- rmse
mejores_param <- list(order = c(p,d,q), seasonal = c(P,D,Q,s))
mejor_modelo <- fit
}
}, error=function(e){})
}
}
}
}
}
}
}
if (!is.null(mejores_param)) {
print(mejores_param)  # Orden óptimo
print(mejor_rmse)
}
# 2. Hiperparámetros SARIMA (búsqueda/grid search) ----
mejor_rmse <- Inf
mejor_modelo <- NULL
mejores_param <- NULL
for (s in c(4, 12, 26, 52)) {
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
for (P in 0:1) {
for (D in 0:1) {
for (Q in 0:1) {
tryCatch({
fit <- Arima(df_train$COP_kg,
order = c(p,d,q),
seasonal = list(order = c(P,D,Q), period = s))
fc <- forecast(fit, h = test_size)
pred <- fc$mean
rmse <- sqrt(mean((df_test$COP_kg - pred)^2))
if (rmse < mejor_rmse) {
mejor_rmse <- rmse
mejores_param <- list(order = c(p,d,q), seasonal = c(P,D,Q,s))
mejor_modelo <- fit
}
}, error=function(e){})
}
}
}
}
}
}
}
for (s in c(4, 12, 26, 52)) {
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
for (P in 0:1) {
for (D in 0:1) {
for (Q in 0:1) {
tryCatch({
fit <- Arima(df_train$COP/kg,
order = c(p,d,q),
seasonal = list(order = c(P,D,Q), period = s))
fc <- forecast(fit, h = test_size)
pred <- fc$mean
rmse <- sqrt(mean((df_test$COP/kg - pred)^2))
if (rmse < mejor_rmse) {
mejor_rmse <- rmse
mejores_param <- list(order = c(p,d,q), seasonal = c(P,D,Q,s))
mejor_modelo <- fit
}
}, error=function(e){})
}
}
}
}
}
}
}
if (!is.null(mejores_param)) {
print(mejores_param)  # Orden óptimo
print(mejor_rmse)
}
df <- read_excel("DatosAgroNet_limpio.xlsx")
# Supón que la columna de precios es COP_kg
df_total <- df
train_size <- floor(0.8 * nrow(df_total))
test_size <- nrow(df_total) - train_size
df_train <- df_total[1:train_size, ]
df_test <- df_total[(train_size+1):nrow(df_total), ]
# 4. Predicción y métricas ----
fc_final <- forecast((c(2,1,2), c(0,0,1,52)), h = test_size)
# 4. Predicción y métricas ----
fc_final <- forecast(((2,1,2), (0,0,1,52)), h = test_size)
# 4. Predicción y métricas ----
fc_final <- forecast((2,1,2), (0,0,1,52), h = test_size)
# 4. Predicción y métricas ----
modelo_manual <- Arima(datos, order = c(2, 1, 2), seasonal = list(order = c(0, 0, 1), period = 52))
# 4. Predicción y métricas ----
modelo_manual <- Arima(df$`COP/kg`, order = c(2, 1, 2), seasonal = list(order = c(0, 0, 1), period = 52))
fc_manual <- forecast(modelo_manual, h = pasos_a_predecir)
fc_manual <- forecast(modelo_manual, h = test_size)
pred <- fc_final$mean
conf_int <- fc_final$lower[,2:1]; # 95% por defecto
mae <- mean(abs(df_test$COP_kg - pred))
mae <- mean(abs(df_test$`COP/kg` - pred))
rmse <- sqrt(mean((df_test$`COP/kg` - pred)^2))
cat("MAE:", mae, "\nRMSE:", rmse, "\n")
df <- read_excel("DatosAgroNet_limpio.xlsx")
# Supón que la columna de precios es COP_kg
df_total <- df
train_size <- floor(0.8 * nrow(df_total))
test_size <- nrow(df_total) - train_size
df_train <- df_total[1:train_size, ]
df_test <- df_total[(train_size+1):nrow(df_total), ]
# 4. Predicción y métricas ----
modelo_manual <- Arima(df$`COP/kg`, order = c(2, 1, 2), seasonal = list(order = c(0, 0, 1), period = 52))
fc_manual <- forecast(modelo_manual, h = test_size)
pred <- fc_final$mean
fc_final <- forecast(modelo_manual, h = test_size)
pred <- fc_final$mean
conf_int <- fc_final$lower[,2:1]; # 95% por defecto
mae <- mean(abs(df_test$`COP/kg` - pred))
rmse <- sqrt(mean((df_test$`COP/kg` - pred)^2))
cat("MAE:", mae, "\nRMSE:", rmse, "\n")
# 5. Gráfica resultados ----
datos_plot <- data.frame(
Fecha = c(df_total$Fecha),
COP_kg = c(df_total$COP_kg)
)
# 5. Gráfica resultados ----
datos_plot <- data.frame(
Fecha = c(df_total$Fecha),
COP_kg = c(df_total$`COP/kg`)
)
pred_df <- data.frame(
Fecha = df_test$Fecha,
Prediccion = pred,
Lower = conf_int[,1],
Upper = conf_int[,2]
)
ggplot() +
geom_line(data = datos_plot, aes(x = Fecha, y = COP_kg), color = "blue", size = 1) +
geom_line(data = pred_df, aes(x = Fecha, y = Prediccion), color = "red", size = 1) +
geom_ribbon(data = pred_df, aes(x = Fecha, ymin = Lower, ymax = Upper), fill="pink", alpha=0.3) +
geom_vline(xintercept = datos_plot$Fecha[train_size], linetype="dashed") +
labs(title = "Predicción SARIMA precio cacao con intervalos de confianza",
x = "Fecha", y = "Precio cacao") +
theme_minimal()
